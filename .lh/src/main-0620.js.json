{
    "sourceFile": "src/main-0620.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1687208845818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1687208845818,
            "name": "Commit-0",
            "content": "import './styles/style.css'\r\nimport Lenis from '@studio-freight/lenis'\r\nimport Colcade from 'colcade'\r\nimport gsap from 'gsap'\r\nimport ScrollTrigger from 'gsap/ScrollTrigger'\r\n\r\nconst sel = (selector) => document.querySelector(selector)\r\n\r\nconst lenis = new Lenis()\r\nfunction raf(time) {\r\n  lenis.raf(time)\r\n  requestAnimationFrame(raf)\r\n}\r\n\r\nrequestAnimationFrame(raf)\r\n\r\n// colcade -------------------\r\nconst masonry = document.querySelector('.masonry')\r\nconst masonryCol = document.createElement('div')\r\nmasonryCol.className = 'grid-col'\r\n\r\nfor (let i = 0; i < 4; i++) {\r\n  masonry.prepend(masonryCol.cloneNode(true))\r\n}\r\nconst col = new Colcade('.masonry', {\r\n  columns: '.grid-col',\r\n  items: '.masonry__card',\r\n})\r\n// scrollTrigger\r\n\r\n// reveal mask -------------------\r\ngsap.registerPlugin(ScrollTrigger)\r\nconst revWrap = sel('.sec-reveal-wrap')\r\nconst revCurtainWrap = sel('.sec-reveal__curtain-wrap')\r\nconst revHorizontalWrap = sel('.sec-reveal__horizontal-wrap')\r\nconst revFadeWrap = sel('.sec-reveal__fade-wrap')\r\nconst revClipWrap = sel('.sec-reveal__clip-wrap')\r\nconst revSec1 = sel('.sec-reveal--1')\r\nconst revSec2 = sel('.sec-reveal--2')\r\nconst revSec3 = sel('.sec-reveal--3')\r\nconst revSec4 = sel('.sec-reveal--4')\r\nconst revSec5 = sel('.sec-reveal--5')\r\nconst revSec6 = sel('.sec-reveal--6')\r\nconst revSec7 = sel('.sec-reveal--7')\r\nconst revSec8 = sel('.sec-reveal--8')\r\nconsole.log(revWrap, revCurtainWrap, revHorizontalWrap, revFadeWrap, revClipWrap, revSec1, revSec2, revSec3, revSec4, revSec5, revSec6, revSec7, revSec8)\r\n\r\ngsap.set('.sec-slide-wrap', { position: 'sticky', paddingBottom: '100vh' })\r\ngsap.set('.sec-reveal--00', { position: 'absolute' })\r\n// gsap.set(revWrap, { marginTop: '100vh' })\r\nScrollTrigger.create({\r\n  trigger: '.sec-slide-wrap',\r\n  start: 'top ',\r\n  end: 'bottom ',\r\n  scrub: true,\r\n  animation: gsap.to('.sec-reveal--00', { ease: 'none', yPercent: '-100' }),\r\n  // pin: true,\r\n})\r\nScrollTrigger.create({\r\n  trigger: '.sec-reveal--0',\r\n  start: 'top ',\r\n  end: 'bottom ',\r\n  scrub: true,\r\n  // pin: '.sec-reveal--0',\r\n  animation: gsap.fromTo('.sec-reveal--0 .sec-reveal__rt', { y: 50 }, { y: -50 }),\r\n})\r\n\r\n// create scrollTrigger that pins rev1Sec and reveals rev2Sec through growing mask attached to .sec-reveal__image\r\nconst secRevealTl = gsap.timeline({\r\n  defaults: { ease: 'power1.in' },\r\n  scrollTrigger: {\r\n    trigger: revWrap,\r\n    start: 'top top',\r\n    end: '120% top', // speed\r\n    toggleActions: 'start none none reverse',\r\n    onEnter: () => gsap.set('.sec-reveal--0', { opacity: 0, pointerEvents: 'none' }),\r\n    onLeaveBack: () => gsap.set('.sec-reveal--0', { opacity: 1 }),\r\n    pin: true,\r\n    scrub: true,\r\n  },\r\n})\r\ngsap.set('.sec-reveal', { gridArea: '1/1' })\r\ngsap.set(rev2Sec, { clipPath: 'circle(0% at 75% 50%)' })\r\nsecRevealTl.fromTo('.sec-reveal__rt', { y: 50 }, { y: -50 }).to(rev2Sec, { clipPath: 'circle(100% at 75% 50%)' }, '<1%')\r\n\r\n// --------------------\r\nconst itemClassName = 'item-'\r\nconst imgClassName = 'img__item'\r\nconst infoClassName = 'info__rt'\r\nconst infoNodeList = document.querySelectorAll(`[class^='${infoClassName}'][class*='${itemClassName}']`)\r\nconst imgNodeList = document.querySelectorAll(`[class^='${imgClassName}'][class*='${itemClassName}']`)\r\n\r\nconst infoList = [...infoNodeList] // spread domTokenList to array\r\nconst imgList = [...imgNodeList] // spread NodeList to domTokenList array\r\nimgList.forEach((element, index) => {\r\n  // gsap.set(element, { opacity: 0 })\r\n})\r\n\r\ninfoList.forEach((element, index) => {\r\n  // console.log(element.classList)\r\n  const classList = [...element.classList]\r\n  const className = classList.filter((str) => new RegExp(itemClassName).test(str)).toString() // find regex itemClassName\r\n  const imgPair = document.querySelector(`[class^='${imgClassName}'][class*='${className}']`)\r\n\r\n  if (index > 0) {\r\n    gsap.set(imgPair, { clipPath: 'polygon(0 100%, 100% 100%, 100% 100%, 0 100%' })\r\n    // gsap.set(imgPair, { x: 200 })\r\n    ScrollTrigger.create({\r\n      // markers: true,\r\n      trigger: element,\r\n      start: 'top 80%',\r\n      end: 'bottom 20%',\r\n      toggleActions: 'restart none none reverse',\r\n      animation: gsap.to(imgPair, { duration: 0.5, clipPath: 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)' }),\r\n    })\r\n  }\r\n  // get css background color of element\r\n  const elementBgColor = window.getComputedStyle(element).getPropertyValue('background-color')\r\n  console.log(elementBgColor)\r\n  ScrollTrigger.create({\r\n    // markers: true,\r\n    trigger: element,\r\n    start: 'top 90%',\r\n    end: 'bottom 90%',\r\n    toggleActions: 'start none none reverse',\r\n    animation: gsap.to('.info', { backgroundColor: elementBgColor, immediateRender: false }),\r\n    scrub: true,\r\n  })\r\n})\r\n// console.log(Math.min(...infoList.map((element) => element.offsetBottom))) // the least offsetTop value\r\nconst topInfoListItem = infoList.reduce((leastTop, element) => (leastTop.offsetTop < element.offsetTop ? leastTop : element)) // element with least offsetTop value\r\nconst bottomInfoListItem = infoList.reduce((mostTop, element) => (mostTop.offsetTop > element.offsetTop ? mostTop : element)) // element with most offsetTop value\r\n\r\nScrollTrigger.create({\r\n  // markers: true,\r\n  trigger: infoList,\r\n  start: 'top bottom',\r\n  startTrigger: topInfoListItem,\r\n  end: 'bottom top',\r\n  endTrigger: bottomInfoListItem,\r\n  animation: gsap.fromTo('.img-wrap', { y: 50 }, { y: -50 }),\r\n  scrub: true,\r\n})\r\n"
        }
    ]
}